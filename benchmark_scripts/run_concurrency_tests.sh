#!/bin/bash

# Generated by Cursor

# Default values
SERVER_URL="http://localhost:8000"
DURATION="30s"
RAMP_UP="10s"
CONCURRENCY_LEVELS=(10 50 100 200 500 1000)
ENDPOINTS='["/plaintext", "/json"]'
OUTPUT_DIR="./results/$(date +%Y-%m-%d_%H-%M-%S)"

# Help function
function show_help {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -h, --help                   Show this help message"
  echo "  -s, --server <url>           Target server URL (default: http://localhost:8000)"
  echo "  -d, --duration <duration>    Test duration in k6 format (default: 30s)"
  echo "  -r, --ramp-up <duration>     Ramp up time in k6 format (default: 10s)"
  echo "  -c, --concurrency <levels>   Comma-separated list of concurrency levels (default: 10,50,100,200,500,1000)"
  echo "  -e, --endpoints <endpoints>  JSON array of endpoints to test (default: [\"/plaintext\", \"/json\", \"/db\"])"
  echo "  -o, --output-dir <dir>       Output directory for results (default: ./results/YYYY-MM-DD_HH-MM-SS)"
  echo ""
  echo "Example:"
  echo "  $0 --server http://localhost:3000 --concurrency 10,20,50,100 --endpoints '[\"/api/v1/users\"]'"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -h|--help)
      show_help
      exit 0
      ;;
    -s|--server)
      SERVER_URL="$2"
      shift 2
      ;;
    -d|--duration)
      DURATION="$2"
      shift 2
      ;;
    -r|--ramp-up)
      RAMP_UP="$2"
      shift 2
      ;;
    -c|--concurrency)
      IFS=',' read -r -a CONCURRENCY_LEVELS <<< "$2"
      shift 2
      ;;
    -e|--endpoints)
      ENDPOINTS="$2"
      shift 2
      ;;
    -o|--output-dir)
      OUTPUT_DIR="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      show_help
      exit 1
      ;;
  esac
done

# Create output directory
mkdir -p "$OUTPUT_DIR"

# Print test configuration
echo "=== Web Server Framework Concurrency Test ==="
echo "Target Server:     $SERVER_URL"
echo "Test Duration:     $DURATION"
echo "Ramp Up Time:      $RAMP_UP"
echo "Concurrency Levels: ${CONCURRENCY_LEVELS[*]}"
echo "Endpoints:         $ENDPOINTS"
echo "Results Directory: $OUTPUT_DIR"
echo "==============================================="

# Run tests for each concurrency level
for concurrency in "${CONCURRENCY_LEVELS[@]}"; do
  echo ""
  echo "Running test with concurrency level: $concurrency"
  echo "-----------------------------------------------"
  
  # Set environment variables for k6
  export TARGET="$SERVER_URL"
  export CONCURRENCY="$concurrency"
  export DURATION="$DURATION"
  export RAMP_UP="$RAMP_UP"
  export ENDPOINTS="$ENDPOINTS"
  
  # Run k6 test
  k6 run --out json="$OUTPUT_DIR/results_concurrency_${concurrency}.json" benchmark_scripts/k6_scripts/concurrency_test.js
  
  # Wait a moment between tests
  echo "Waiting 5 seconds before next test..."
  sleep 5
done

echo ""
echo "All tests completed. Results stored in: $OUTPUT_DIR"

# Generate summary report
echo "Generating summary report..."
{
  echo "# Web Server Framework Concurrency Test Results"
  echo "- Target Server: $SERVER_URL"
  echo "- Test Time: $(date)"
  echo "- Test Duration: $DURATION"
  echo "- Endpoints Tested: $ENDPOINTS"
  echo ""
  echo "## Summary by Concurrency Level"
  echo ""
  echo "| Concurrency | Requests/sec | Avg Response Time (ms) | p95 Response Time (ms) | Error Rate (%) |"
  echo "|-------------|--------------|------------------------|------------------------|---------------|"
  
  for concurrency in "${CONCURRENCY_LEVELS[@]}"; do
    if [ -f "$OUTPUT_DIR/results_concurrency_${concurrency}.json" ]; then
      # Extract metrics using jq (if available)
      if command -v jq &> /dev/null; then
        REQUESTS_PER_SEC=$(jq -r '.metrics.http_reqs.rate' "$OUTPUT_DIR/results_concurrency_${concurrency}.json")
        AVG_RESPONSE_TIME=$(jq -r '.metrics.http_req_duration.avg' "$OUTPUT_DIR/results_concurrency_${concurrency}.json")
        P95_RESPONSE_TIME=$(jq -r '.metrics.http_req_duration.p(95)' "$OUTPUT_DIR/results_concurrency_${concurrency}.json")
        ERROR_RATE=$(jq -r '.metrics.http_req_failed.rate * 100' "$OUTPUT_DIR/results_concurrency_${concurrency}.json")
        
        echo "| $concurrency | $REQUESTS_PER_SEC | $AVG_RESPONSE_TIME | $P95_RESPONSE_TIME | $ERROR_RATE |"
      else
        echo "| $concurrency | [install jq to parse metrics] | - | - | - |"
      fi
    else
      echo "| $concurrency | No results found | - | - | - |"
    fi
  done
} > "$OUTPUT_DIR/summary_report.md"

echo "Summary report generated: $OUTPUT_DIR/summary_report.md"
echo "===============================================" 